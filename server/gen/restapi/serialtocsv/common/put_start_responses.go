// Code generated by go-swagger; DO NOT EDIT.

package common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"app/server/gen/models"
)

// PutStartOKCode is the HTTP code returned for type PutStartOK
const PutStartOKCode int = 200

/*PutStartOK OK

swagger:response putStartOK
*/
type PutStartOK struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPutStartOK creates PutStartOK with default headers values
func NewPutStartOK() *PutStartOK {

	return &PutStartOK{}
}

// WithPayload adds the payload to the put start o k response
func (o *PutStartOK) WithPayload(payload interface{}) *PutStartOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put start o k response
func (o *PutStartOK) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutStartOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*PutStartDefault Unexpected error

swagger:response putStartDefault
*/
type PutStartDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorV1 `json:"body,omitempty"`
}

// NewPutStartDefault creates PutStartDefault with default headers values
func NewPutStartDefault(code int) *PutStartDefault {
	if code <= 0 {
		code = 500
	}

	return &PutStartDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put start default response
func (o *PutStartDefault) WithStatusCode(code int) *PutStartDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put start default response
func (o *PutStartDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put start default response
func (o *PutStartDefault) WithPayload(payload *models.ErrorV1) *PutStartDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put start default response
func (o *PutStartDefault) SetPayload(payload *models.ErrorV1) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutStartDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
