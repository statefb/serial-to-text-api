// Code generated by go-swagger; DO NOT EDIT.

package common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"local.packages/gen/models"
)

// PutSendallOKCode is the HTTP code returned for type PutSendallOK
const PutSendallOKCode int = 200

/*PutSendallOK OK

swagger:response putSendallOK
*/
type PutSendallOK struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPutSendallOK creates PutSendallOK with default headers values
func NewPutSendallOK() *PutSendallOK {

	return &PutSendallOK{}
}

// WithPayload adds the payload to the put sendall o k response
func (o *PutSendallOK) WithPayload(payload interface{}) *PutSendallOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put sendall o k response
func (o *PutSendallOK) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutSendallOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*PutSendallDefault Unexpected error

swagger:response putSendallDefault
*/
type PutSendallDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorV1 `json:"body,omitempty"`
}

// NewPutSendallDefault creates PutSendallDefault with default headers values
func NewPutSendallDefault(code int) *PutSendallDefault {
	if code <= 0 {
		code = 500
	}

	return &PutSendallDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put sendall default response
func (o *PutSendallDefault) WithStatusCode(code int) *PutSendallDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put sendall default response
func (o *PutSendallDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put sendall default response
func (o *PutSendallDefault) WithPayload(payload *models.ErrorV1) *PutSendallDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put sendall default response
func (o *PutSendallDefault) SetPayload(payload *models.ErrorV1) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutSendallDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
