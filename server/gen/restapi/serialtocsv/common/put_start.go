// Code generated by go-swagger; DO NOT EDIT.

package common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutStartHandlerFunc turns a function with the right signature into a put start handler
type PutStartHandlerFunc func(PutStartParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutStartHandlerFunc) Handle(params PutStartParams) middleware.Responder {
	return fn(params)
}

// PutStartHandler interface for that can handle valid put start params
type PutStartHandler interface {
	Handle(PutStartParams) middleware.Responder
}

// NewPutStart creates a new http.Handler for the put start operation
func NewPutStart(ctx *middleware.Context, handler PutStartHandler) *PutStart {
	return &PutStart{Context: ctx, Handler: handler}
}

/*PutStart swagger:route PUT /start Common putStart

start collecting data

*/
type PutStart struct {
	Context *middleware.Context
	Handler PutStartHandler
}

func (o *PutStart) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutStartParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
