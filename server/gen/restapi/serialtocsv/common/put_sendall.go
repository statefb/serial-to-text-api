// Code generated by go-swagger; DO NOT EDIT.

package common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutSendallHandlerFunc turns a function with the right signature into a put sendall handler
type PutSendallHandlerFunc func(PutSendallParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutSendallHandlerFunc) Handle(params PutSendallParams) middleware.Responder {
	return fn(params)
}

// PutSendallHandler interface for that can handle valid put sendall params
type PutSendallHandler interface {
	Handle(PutSendallParams) middleware.Responder
}

// NewPutSendall creates a new http.Handler for the put sendall operation
func NewPutSendall(ctx *middleware.Context, handler PutSendallHandler) *PutSendall {
	return &PutSendall{Context: ctx, Handler: handler}
}

/*PutSendall swagger:route PUT /sendall Common putSendall

send all collected data.

*/
type PutSendall struct {
	Context *middleware.Context
	Handler PutSendallHandler
}

func (o *PutSendall) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutSendallParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
